rm(list=ls())

library(leaflet)
library(shiny)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(sf)

load(file="/Users/katherine/Documents/r_projects/ha_state_forShny.rData")
load(file="/Users/katherine/Documents/r_projects/crop_forShny.rData")
load(file="/Users/katherine/Documents/r_projects/conUS_forShny.rData")

source("/Users/katherine/Documents/r_projects/map_utils.R")
source("/Users/katherine/Documents/r_projects/ts_utils.R")
source("/Users/katherine/Documents/r_projects/bar_utils.R")

fao_group <- levels(ha_state$crop_fao)
all_years <- sort(unique(ha_state$year))
all_states <- conUS$NAME

df1 <- fao_group

#UI Side
ui <- fluidPage(
  shinydashboard::box(
    width = 12,
    title = "Select a State",
    column(
      width = 2,
      shiny::actionButton( inputId = "clearHighlight",
                           icon = icon(name = "eraser"),
                           label = "Clear State",            
                           style = "color: #fff; background-color: #D75453; border-color: #C73232"))
    )
  )
  column(
    width = 10,
    leaflet::leafletOutput( outputId = "myMap",
                            height = 850)
  )
  

#Server Side
shinyServer<- function(input, output, session) {
  
  #Showing Loading Spinner
  shinyjs::show('spinner')
  
  # function to create  map
  base.map <- function(){
    leaflet() %>%
      #addTiles( urlTemplate = "https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png") %>%
      #setView( lng = -95.7192
      #         , lat = 37.0902
      #         , zoom = 11 ) %>%
      addProviderTiles("CartoDB.Positron") %>%
      addPolygons( data = df1
                   , fillOpacity = 0
                   , opacity = 0.2
                   , color = "#000000"
                   , weight = 2
                   , layerId = usa$state
                   , group = "click.list")
  }  
  



myMap_reval <- reactiveVal(base.map())
output$myMap <- renderLeaflet({
  myMap_reval()
  
}) 

#Select a certain state
click.list <- shiny::reactiveValues( ids = vector())

#Removing past selected states
   shiny::observeEvent(input$myMap_shape_click, ignoreNULL = T, ignoreInit = T, {
     if(length(click.list)>0)
     {
       remove_id = click.list$ids
       lines.of.interest <- usa [which( usa$state %in% remove_id) , ]
       leaflet::leafletProxy( mapId = "myMap" ) %>%
         addPolylines( data = lines.of.interest
                       , layerId = lines.of.interest@data$id
                       , color = "#000000"
                       , weight = 2
                       , opacity = 0.2)
       
     } 
       #New state selection
     click <- input$myMap_shape_click
     click.list$ids <- click$id  
     lines.of.interest <- usa[ which( usa$state %in% click.list$ids ) , ]
     print(click)
     if( is.null( click$id ) ){
       req( click$id )
     } else if( !click$id %in% lines.of.interest@data$id ){
       leaflet::leafletProxy( mapId = "myMap" ) %>%
         addPolylines( data = lines.of.interest,
                       layerId = lines.of.interest@data$id,
                       color = "blue",
                        weight = 5,
                        opacity = 1)
  }
  })
  
   shiny::observeEvent( input$clearHighlight, {
     click.list$ids <- NULL
     myMap_reval(base.map())
   })  

}

shiny::shinyApp( ui = ui, server = server)
