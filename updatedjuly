{if (!require("devtools"))
  install.packages("devtools")
  if (!require("shiny")) 
    install.packages("shiny")
  if (!require("ggplot2")) 
    install.packages("ggplot2")
  if (!require("foreign")) 
    install.packages("foreign")
  if (!require("dplyr")) 
    install.packages("dplyr")
  if (!require("lazyeval")) 
    install.packages("lazyeval")
  if (!require("psych")) 
    install.packages("psych")
  if (!require("shinythemes")) 
    install.packages("shinythemes")}

#variable lists: matching names with labels. If you skip this step, your variable names will appear as-is in the dropdowns. 
categoricals <- {c("none" = "none", "year" = "year", "female-headed household " = "female_hoh_" , "household sold crop " = "sold_crop_" , 
                   "farm size category, <=2 ha (1), >2-4 ha (2), >4-10 ha (3), >10 ha (4)" = "smallholder_cat_" ,  
                   "household grew any fruit crops " = "grew_fruit_" ,  "household grew any permanent crops " = "grew_perm_" ,  "household grew annual crops " = "grew_annual_" ,  
                   "household increased crop yield between 2008 and 2010 " = "crop_increaser_2008_2010" , "household irrigated any plot " = "plot_irrigated_" ,  
                   "household used organic fertilizer on any plot " = "org_fert_" ,  "household used inorganic fertilizer on any plot " = "inorg_fert_" ,  
                   "household used pesticides or herbicides on any plot " = "pest_herb_usage_" ,  "household had any intercropped plot, any crop " = "landuse_ic_ap_") }


continuous <- {c("total farm area measure, ha - GPS-based if available, farmer-report if not " = "farmsize_ha_" ,  "crop area planted, by household " = "arpl_crop_" ,  
                 "crop area harvested, by household " = "arhv_crop_" , "crop quantity harvested, by household " = "harv_quant_kg_" , 
                 "crop yield by area harvested kg/ha (GPS) (harv_quant/area_harvested_ha)  " = "yield_arhv_ha_" ,  " crop yield by area planted kg/ha (GPS) (harv_quant/area_planted_ha)" = "yield_arpl_ha_" , 
                 "change in crop yield by area harvested from 2008-2010 " = "yield_change_arhv_2008_2010" ,  "change in crop yield by area harvested from 2010-2012 " = "yield_change_arhv_2010_2012" ,  
                 "change in crop yield by area planted from 2008-2010 " = "yield_change_arpl_2008_2010" , "change in crop yield by area planted from 2010-2012 " = "yield_change_arpl_2010_2012" ,
                 
                 "total number of household labor days on farm " = "tot_hh_labor_days_" ,  "total number of hired labor days " = "tot_hired_labor_days_" ,  "quantity of crop sold, kg " = "quant_sold_" ,  
                 "crop price clustered median (smallest geo unit w/ >=10 price values) " = "shadowpricecluster_lrs_" ,
                 "number of household members " = "hh_size_" ,  "distance to nearest trunk road (as defined by TANROADS) (geovars) " = "dist_road_" ,  
                 "distance to nearest major market (FEWSNET key market centers) (geovars) " = "dist_market_" ,  "age of head of household " = "age_hoh_" ,  "years of education completed by the household head " = "educ_yrs_hoh_" ,  
                 
                 "total land allocation to annual crops besides crop " = "alloc_otherann_" ,  "total land allocation to permanent/fruit crops " = "alloc_perm_" ,  
                 "change in land allocation to crop, 2010-2012 " = "alloc_change_crop_2010_2012" ,  
                 "change in land allocation to annual crops besides crop, 2010-2012 " = "alloc_change_otherann_2010_2012" ,  "change in land allocation to permanent/fruit crops, 2010-2012 " = "alloc_change_perm_2010_2012" ,  
                 "change in land allocation to crop, 2008-2010 " = "alloc_change_crop_2008_2010" ,  "change in land allocation to annual crops besides crop, 2008-2010 " = "alloc_change_otherann_2008_2010" ,  
                 "change in land allocation to permanent/fruit crops, 2008-2010 " = "alloc_change_perm_2008_2010"   
)}

allvarlist <- {c("none" = "none", "year" = "year", " " = "female_hoh_" , "household sold crop " = "sold_crop_" , 
                 "farm size category, <=2 ha (1), >2-4 ha (2), >4-10 ha (3), >10 ha (4)" = "smallholder_cat_" ,  
                 "household grew any fruit crops " = "grew_fruit_" ,  "household grew any permanent crops " = "grew_perm_" ,  "household grew annual crops " = "grew_annual_" ,  
                 "household increased crop yield between 2008 and 2010 " = "crop_increaser_2008_2010" ,   "household irrigated any plot " = "plot_irrigated_" ,  
                 "household used organic fertilizer on any plot " = "org_fert_" ,  "household used inorganic fertilizer on any plot " = "inorg_fert_" ,  
                 "household used pesticides or herbicides on any plot " = "pest_herb_usage_" ,  "household had any intercropped plot, any crop " = "landuse_ic_ap_", 
                 #continuous
                 "total farm area measure, ha - GPS-based if available, farmer-report if not " = "farmsize_ha_" ,  "crop area planted, by household " = "arpl_crop_" ,  
                 "crop area harvested, by household " = "arhv_crop_" , "crop quantity harvested, by household " = "harv_quant_kg_" , 
                 "crop yield by area harvested kg/ha (GPS) (harv_quant/area_harvested_ha)  " = "yield_arhv_ha_" ,  " crop yield by area planted kg/ha (GPS) (harv_quant/area_planted_ha)" = "yield_arpl_ha_" ,  
                 "change in crop yield by area harvested from 2008-2010 " = "yield_change_arhv_2008_2010" ,  "change in crop yield by area harvested from 2010-2012 " = "yield_change_arhv_2010_2012" ,  
                 "change in crop yield by area planted from 2008-2010 " = "yield_change_arpl_2008_2010" , "change in crop yield by area planted from 2010-2012 " = "yield_change_arpl_2010_2012" ,
                 
                 "total number of household labor days on farm " = "tot_hh_labor_days_" ,  "total number of hired labor days " = "tot_hired_labor_days_" ,  "quantity of crop sold, kg " = "quant_sold_" ,  
                 "crop price clustered median (smallest geo unit w/ >=10 price values) " = "shadowpricecluster_lrs_" ,
                 "number of household members " = "hh_size_" ,  "distance to nearest trunk road (as defined by TANROADS) (geovars) " = "dist_road_" ,  
                 "distance to nearest major market (FEWSNET key market centers) (geovars) " = "dist_market_" ,  "age of head of household " = "age_hoh_" ,  "years of education completed by the household head " = "educ_yrs_hoh_" ,  
                 
                 "total land allocation to annual crops besides crop " = "alloc_otherann_" ,  "total land allocation to permanent/fruit crops " = "alloc_perm_" ,  
                 "change in land allocation to crop, 2010-2012 " = "alloc_change_crop_2010_2012" ,  
                 "change in land allocation to annual crops besides crop, 2010-2012 " = "alloc_change_otherann_2010_2012" ,  "change in land allocation to permanent/fruit crops, 2010-2012 " = "alloc_change_perm_2010_2012" ,  
                 "change in land allocation to crop, 2008-2010 " = "alloc_change_crop_2008_2010" ,  "change in land allocation to annual crops besides crop, 2008-2010 " = "alloc_change_otherann_2008_2010" ,  
                 "change in land allocation to permanent/fruit crops, 2008-2010 " = "alloc_change_perm_2008_2010")}

#this is a version with no "none" option
allvarlist2 <- {c("year" = "year", "female-headed household " = "female_hoh_" , "household sold crop " = "sold_crop_" , 
                  "farm size category, <=2 ha (1), >2-4 ha (2), >4-10 ha (3), >10 ha (4)" = "smallholder_cat_" ,  
                  "
                  "crop area harvested, by household " = "arhv_crop_" , "crop quantity harvested, by household " = "harv_quant_kg_" , 
                  "(harv_quant/area_harvested_ha) crop yield by area harvested kg/ha (GPS) " = "yield_arhv_ha_" ,  "(harv_quant/area_planted_ha) crop yield by area planted kg/ha (GPS) " = "yield_arpl_ha_" , 
                  "change in crop yield by area harvested from 2008-2010 " = "yield_change_arhv_2008_2010" ,  "change in crop yield by area harvested from 2010-2012 " = "yield_change_arhv_2010_2012" ,  
                  "change in crop yield by area planted from 2008-2010 " = "yield_change_arpl_2008_2010" , "change in crop yield by area planted from 2010-2012 " = "yield_change_arpl_2010_2012" ,
                  
                  "total number of household labor days on farm " = "tot_hh_labor_days_" ,  "total number of hired labor days " = "tot_hired_labor_days_" ,  "quantity of crop sold, kg " = "quant_sold_" ,  
                  "distance household transported crop to sale, km " = "dist_transported_avg_" ,  "crop price clustered median (smallest geo unit w/ >=10 price values) " = "shadowpricecluster_lrs_" ,
                  "number of household members " = "hh_size_" ,  "distance to nearest trunk road (as defined by TANROADS) (geovars) " = "dist_road_" ,  
                  "distance to nearest major market (FEWSNET key market centers) (geovars) " = "dist_market_" ,  "age of head of household " = "age_hoh_" ,  "years of education completed by the household head " = "educ_yrs_hoh_" ,  
                  
                  
                  "change in land allocation to permanent/fruit crops, 2008-2010 " = "alloc_change_perm_2008_2010")}

library(shinythemes)

#set up the user interface
shinyUI(fluidPage(theme = shinytheme("cosmo"), #choose a theme
                  headerPanel("
                  
                  sidebarPanel( #this will be in the left side panel - all user inputs and notes
                    
                    h3("Scatterplot"), #title - heading level 3
                    h5("each dot represents one household"),
                    #drop-down inputs
                    selectInput('x', 'Scatterplot X Variable', choices = c(allvarlist), selected= "arpl_crop_"),
                    selectInput('y', 'Scatterplot Y Variable', choices = c(allvarlist), selected = "harv_quant_kg_"),
                    selectInput('color', 'Scatterplot Color Variable', c('none', allvarlist2)),
                    h6("note: if binary variable is selected, scale will look continuous, but colors will be 1 or 0"), 
                    
                    selectInput('facet_row', 'Scatterplot Facet Row', choices = c(categoricals), selected = "none"), 
                    selectInput('facet_col', 'Scatterplot Facet Column', choices = c(categoricals), selected = "year"),
                    
                    h4("Scatterplot Options"),
                    checkboxInput('jitter', 'Jitter (spread out the points for a categorical variable)'),
                    checkboxInput('smooth', 'Smooth (add a loess smoother line and confidence interval)'),
                    
                    h3("Histogram & Summary Statistics"),
                    selectInput('hist', 'Histogram Variable', choices = c(continuous), selected = "farmsize_ha_"),
                    numericInput('n_breaks', 'Histogram Bin Width (type a number, based on axis scale)', value = 50),
                    numericInput('bottom', 'Histogram Lower Limit Percentile (type a number between 0 and 1, 
               .01 = exclude bottom 1% of pooled-wave sample)', value = 0), #default no bottom trim
                    numericInput('top', 'Histogram Upper Limit Percentile', value = 1), #default no top trim
                    selectInput('facet_row2', 'Histogram Facet Row (group1)', choices = c(categoricals), selected = "none"), 
                    selectInput('facet_col2', 'Histogram Facet Column (group2)', choices = c(categoricals), selected = "year"),
                    
                    
                  ),
                  
                  mainPanel( #this will be in the main body of the page - make placeholder spots for the charts
                    fluidRow( #fluidrow will adjust to page size
                      h4("Drag a rectangle to zoom: this plot"),
                      fluidRow(
                        #make a plot where you can drag a rectangle, which will make the next plot down zoom
                        plotOutput("plot2",
                                   brush = brushOpts(
                                     id = "plot2_brush",
                                     resetOnNew = TRUE
                                   )
                        )
                      ),
                      #this plot will zoom based on the rectangle you draw
                      h4("controls the zoom of this plot (changing options will reset)"),
                      plotOutput("plot3")
                    ),
                    
                    fluidRow(
                      plotOutput("histplot"))), #simple histogram
                  
                  fluidRow( #this is outside the main panel, its own row across the bottom
                    h4(" Unweighted Summary Statistics for Histogram Variable (grouped by year, and by histogram facet row if selected)"),
                    verbatimTextOutput("summary"), #output summary statistics below
                    h5(" statistics provided: 
      item name, item number, grouping variable levels, number of valid cases, mean, standard deviation, trimmed mean (with trim defaulting to .1), 
       median (standard or interpolated), mad: median absolute deviation (from the median), minimum, 
       maximum, range, skew, kurtosis, standard error, 1st, 2nd, 25th, 50th, 75th, 98th, 99th percentile values")
                  )
))
{if (!require("devtools"))
  install.packages("devtools")
  if (!require("shiny")) 
    install.packages("shiny")
  if (!require("ggplot2")) 
    install.packages("ggplot2")
  if (!require("foreign")) 
    install.packages("foreign")
  if (!require("dplyr")) 
    install.packages("dplyr")
  if (!require("lazyeval")) 
    install.packages("lazyeval")
  if (!require("psych")) 
    install.packages("psych")
  if (!require("shinythemes")) 
    install.packages("shinythemes")}

#load libraries 
library(ggplot2) #make plots
library(foreign) #read foreign files like .dta
library(dplyr) #lots of functions, use piping
library(lazyeval) #running in the background of dplyr
library(psych) #to use describeBy
library(shiny) #need Shiny 
library(shinythemes) #to customize themes

#read in the data
yieldsraw <- read.dta("data/shiny_data.dta") #we have a .dta file from Stata, but this could be any type of data file that R or Foreign can read
yieldsframe <- as.data.frame(yieldsraw) #make it a data frame
yields <- mutate_(yieldsframe, none="1") #workaround: make a variable with only one level as the default grouping var (because descriptive statistics weren't reacting when there was no group var)

#now the server function - all the outputs will be defined here
shinyServer(function(input, output) {
  
  ranges2 <- reactiveValues(x = NULL, y = NULL) #make an object for the scatterplot to recognize if it should zoom in
  
  #output for scatterplots
  output$plot2 <- renderPlot({
    
    p <- ggplot(yields, aes_string(x=input$x, y=input$y)) + theme_bw() + geom_point(pch=1) #make a plot called p based on the chosen input variables 
    
    if (input$color != 'none') #react if color input is chosen
      p <- p + aes_string(color=input$color) #note: this isn't recognizing categorical color schemes (works for continuous and binary)
    
    facets <- paste(input$facet_row, '~', input$facet_col) #make an object showing if facets have been chosen
    if (facets != '. ~ .') #react if a facet is chosen
      p <- p + facet_grid(facets) 
    
    if (input$jitter) #react if jittering is selected
      p <- p + geom_jitter(pch=1) #set the points to be open circles
    if (input$smooth) #react if smoothing is selected
      p <- p + geom_smooth(method = loess, col="coral1") #default is loess below n=1000 and GAM above n=1000, set to always loess
    p <- p + theme(text = element_text(size = 14))
    p #print it
  })
  
  output$plot3 <- renderPlot({
    o <- ggplot(yields, aes_string(x=input$x, y=input$y)) + theme_bw() + geom_point(pch=1) +
      coord_cartesian(xlim = ranges2$x, ylim = ranges2$y, expand = FALSE)      #make ranges react to brushing on above plot
    #this repeats above commands
    if (input$color != 'none')
      o <- o + aes_string(color=input$color) 
    
    facets <- paste(input$facet_row, '~', input$facet_col)
    if (facets != '. ~ .')
      o <- o + facet_grid(facets) 
    
    if (input$jitter)
      o <- o + geom_jitter(pch=1)
    if (input$smooth)
      o <- o + geom_smooth(col="coral1")
    
    o <- o + coord_cartesian(xlim = ranges2$x, ylim = ranges2$y, expand = FALSE) #make ranges react to brushing on above plot - was causing a problem if this wasn't at the bottom
    o <- o + theme(text = element_text(size = 14))
    o #do NOT use "print(o)" instead here, the scaling will be wrong on the zoomed chart
  })
  
  #this code makes it so dragging a rectangle on the top scatterplot will reset the zoom on the bottom scatterplot  
  observe({       #reactive
    brush <- input$plot2_brush #make an object that will check if a brush square has been dragged
    if (!is.null(brush)) {
      ranges2$x <- c(brush$xmin, brush$xmax)
      ranges2$y <- c(brush$ymin, brush$ymax)
      
    } else {
      ranges2$x <- NULL
      ranges2$y <- NULL
    }
  })
  
  #output for histogram 
  output$histplot <- renderPlot({
    #set aesthetics, set bins to be controlled by numeric input
    q <- ggplot(yields, aes_string(input$hist)) + geom_histogram(binwidth = (as.numeric(input$n_breaks)), col= "dodgerblue4", fill="dodgerblue", alpha = .7) + 
      theme_bw() 
    
    #input$hist as an object is a character vector, so we have to call it together with its source to call the chosen variable itself and not just its name
    numvar <- yields[, input$hist] 
    
    #make objects based on percentiles to trim the histogram you see
    upper.cut <- quantile(numvar, probs = input$top, na.rm = TRUE)
    lower.cut <- quantile(numvar, probs = input$bottom, na.rm = TRUE)  
    
    facets2 <- paste(input$facet_row2, '~', input$facet_col2) #adjust to facets
    if (facets2 != '. ~ .')
      q <- q + facet_grid(facets2)
    q <- q + coord_cartesian(xlim = c(lower.cut, upper.cut)) 
    q <- q + theme(text = element_text(size = 14))
    q    
  })
  
  #output for summary stats
  # use a reactive value to represent grouping variable selection for descriptives
  group_selects <- reactiveValues(value = NULL) #make a reactive object
  observe({
    input$facet_row2
    if(is.null(input$facet_row2) || input$facet_row2 == '')
      group_selects$value <- NULL  #this doesn't seem to be working - thus did workaround of making variable named "none" that always has value of 1
    else {
      group_selects$value <- unique(yields[[input$facet_row2]])
    }
  })
  
  data_to_plot <- reactive({
    if(!(is.null(input$facet_row2) || input$facet_row2 == '')) {
      req(group_selects$value)                        # To prevent unnecessary re-run
      dataset <- as.data.frame(yields) %>% #take a data frame of the data
        mutate_(group_ = input$facet_row2) %>% #make a new var called group_ that is equal to the selected facet row
        select_(input$hist, "group_", "year") #keep only the histogram variable, group_, and year - note this is the only place (and in next block of code) where a variable is hard-coded (needs to be changed to work with new data)
      
    } else {
      dataset<- as.data.frame(yields) %>% 
        mutate_(group_ = "1") %>%  #if nothing is chosen, make group_ equal to 1 - this part doesn't seem to work, using variable "none" instead
        select_(input$hist, "group_", "year")
    }
    return(dataset)
  })
  
  output$summary <- renderPrint({
    dataset <- data_to_plot()
    validate(
      need(!(is.null(dataset) || nrow(dataset) == 0), #make sure there is data 
           'There are no data to plot!')
    )
    
    
    v <- describeBy(dataset, list(dataset$group_, dataset$year), quant=c(.01, .02, .25, .5, .75, .98, .99), mat=TRUE, digits=1) #use describeBy from psych package to show all summary stats. If switching to another dataset will need to change reference to "year" variable in this line.  
    #added "quant()" option from describe command to get additional percentiles. This may be more customizable - would like to not output the stats for the grouping variables in the matrix.
    v
    
    
    
  })
})
